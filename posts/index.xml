<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on Sully Squared</title>
        <link>https://ssulei7.github.io/posts/</link>
        <description>Recent content in Posts on Sully Squared</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
        <lastBuildDate>Sat, 15 May 2021 22:22:03 -0500</lastBuildDate>
        <atom:link href="https://ssulei7.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>Why most QA Automation fails</title>
            <link>https://ssulei7.github.io/posts/05-15-2021-qa-automation-fails/</link>
            <pubDate>Sat, 15 May 2021 22:22:03 -0500</pubDate>
            
            <guid>https://ssulei7.github.io/posts/05-15-2021-qa-automation-fails/</guid>
            <description>Overview Recently, I made a poll on what would be my next blog post topic, and a lot of my network is interested in what I view as major reasons that most QA Automation endeavors fail:
Given that I spent a significant amount of my time in my early career doing SDET work, as well as beginning to develop an understanding the benefit of having a DevOps based culture within IT organizations, this post will discuss my conclusions as to what I feel makes for a failed automation effort.</description>
            <content type="html"><![CDATA[<h2 id="overview">Overview</h2>
<p>Recently, I made a poll on what would be my next blog post topic, and a lot of my network is interested in what I view as major reasons that most QA Automation endeavors fail:</p>
<p><img src="images/poll.jpg" alt="Poll"></p>
<p>Given that I spent a significant amount of my time in my early career doing SDET work, as well as beginning to develop an understanding the benefit of having a DevOps based culture within IT organizations, this post will discuss my conclusions as to what I feel makes for a failed automation effort.</p>
<p>Some of my talking points will be a bit biased, and may be unpopular opinions in the QA world. However, please take my views as constructive criticism regarding the things that I have seen over the years.</p>
<p>With that being said, here is what I feel are some of the main reasons why most QA automation fails.</p>
<h2 id="automation-team-is-siloed-from-the-development-team">Automation team is siloed from the development team</h2>
<p><img src="images/silo.jpg" alt="Silo"></p>
<p>Sin number one, the QA / QA Automation team works in a silo, with little to no visibility in regards to what is happening within their Sprint.</p>
<p>From an automation development perspective, this makes understanding what changes are going to break my existing tests EXTREMELY cumbersome. More often than not, teams that work in a silo wait until development is complete to realize their  automation is crumbling because a developer completely reworked how that view functions within the application under test.</p>
<p>Furthermore, when an automation team detaches themselves from development, they lose insight as to how they can make their tests more efficient when building out their test scenarios, views, hooks, services, etc.</p>
<p>My best advice for those that are doing UI / Service Automation; integrate yourself with the team in which you&rsquo;re building those tests for. Be a part of their sprint, as well as ensure capacity is accounted for automation based work. A proactive approach is much better than a reactive approach.</p>
<h2 id="only-using-page-object-model-pattern">Only using Page Object Model pattern</h2>
<p><img src="images/pageobject.png" alt="PageObjectPattern"></p>
<p>This particular sin is one that personally bothers me anytime I am reviewing a framework.</p>
<p>While the page object model is a very good way of structuring our UI testing views, this shouldn&rsquo;t be the only pattern we need to rely on when architecting our automation framework. For example, there are many cases when we need to specify different behavior for different users, handling the creation of different web driver instances (e.g., Firefox, Chrome, etc), or maybe even creating small extensions to interface directly with APIs, databases, etc for data preparation and teardown.</p>
<p>Pigeonholing yourself into one pattern will not only cripple your automation, but will lead to extensive amounts of boiler plate as you are implementing functionality needed from your framework only at the UI level, where the cases I just listed become borderline impossible to address.</p>
<p>Typically when I see a framework only using this pattern, this is a tell tale sign that the automation engineer implementing said framework has very poor understanding of the programming language they are utilizing.</p>
<p>My recommendation for those falling victim to this particular automation sin is to engage in more professional development around design patterns, programming fundamentals, etc.</p>
<p>There are actually two books I recommend that will help a lot: <strong>Clean Code by Robert C Martin</strong> and <strong>Design Patterns: Elements of Reusable Object-Oriented Software by the &ldquo;gang of four&rdquo;</strong>.</p>
<p><img src="images/cleancode.jpg" alt="CleanCode"></p>
<p><img src="images/gangoffour.jpg" alt="GangOfFour"></p>
<h2 id="attempting-to-automate-everything">Attempting to automate everything</h2>
<p><img src="images/dontautomate.jpg" alt="DontAutomateEverything"></p>
<p>Last but not least, the ultimate sin of any automation implementation: <strong>attempting to automate everything</strong>.</p>
<p>This is to the contrary of what we typically say in DevOps: automate anything and everything. However, in the QA world, this is not always the case.</p>
<p>In fact, rather than thinking of <em>&ldquo;How can I automate all my regression?&quot;</em>&hellip; we should rather ask the question <em><strong>What part of my regression is considered critical path for the business? What tests, at the end of the day, really fall in line of the customer experience?</strong></em></p>
<p>When you ask yourself this question, it can save you a lot of time (both implementation and execution) for your overall automation effort. I have seen throughout my career many cases where folks will add redundancy to the automation suite that were either a result of exploratory tests, an edge case in production, or a one time bug that is being retested for no reason.</p>
<p>We should also remember the place of integration / UI tests within our testing lifecycle by revisiting the testing pyramid:</p>
<p><img src="images/testpyramid.png" alt="TestPyramid"></p>
<p>In our overall testing cycle, UI and Integration (service) tests are only but a fraction of our overall testing effort. In any development team, unit tests <strong>SHOULD</strong> be a majority of our regression.</p>
<p>tldr: at the black box level, automate only the things that matter.</p>
<h2 id="conclusion">Conclusion</h2>
<p>Overall, my general view of automation encompasses collaboration with the dev team (aka you are a dev writing automation), well written code, zero redundancy, scalability, and prioritization of business critical path.</p>
<p>Hopefully those of you who are looking into getting into the world of QA or are already working in a QA related function developed some insights as to what we should avoid while implementing our automation.</p>
<p>I may make another post demonstrating an example of a well defined framework structure, as well as neat tips and tricks to optimize regression time. ðŸ˜Š</p>
]]></content>
        </item>
        
        <item>
            <title>How I embed Saucelab Build Videos into Azure Pipelines</title>
            <link>https://ssulei7.github.io/posts/04-06-2021-saucelabs-azure-pipelines/</link>
            <pubDate>Tue, 06 Apr 2021 13:16:49 -0500</pubDate>
            
            <guid>https://ssulei7.github.io/posts/04-06-2021-saucelabs-azure-pipelines/</guid>
            <description>Overview of Saucelabs For those of you that don&amp;rsquo;t know, within the QA Automation world there are many tools in which we can leverage to distribute and run our Selenium tests on. One popular tool that I&amp;rsquo;ve used in the market is Saucelabs. While it is entirely possible to utilize your CI job&amp;rsquo;s resources to run these tests, one thing that made using Saucelabs very appealing to me was the ability to actually view video playback of your test in action.</description>
            <content type="html"><![CDATA[<h2 id="overview-of-saucelabs">Overview of Saucelabs</h2>
<p>For those of you that don&rsquo;t know, within the QA Automation world there are many tools in which we can leverage to distribute and run our Selenium tests on. One popular tool that I&rsquo;ve used in the market is Saucelabs. While it is entirely possible to utilize your CI job&rsquo;s resources to run these tests, one thing that made using Saucelabs very appealing to me was the ability to actually view video playback of your test in action. This allowed for myself and the rest of the QA Automation team I work with to quickly identify flakiness within our scripts, or clearly identify a defect within the application under test.</p>
<h2 id="saucelabs-and-azure-pipelines">Saucelabs and Azure Pipelines</h2>
<p>Most of the time that I&rsquo;ve used Saucelabs, I was utilizing tools such as Jenkins to execute my jobs and view my results accordingly with Saucelabs own proprietary extensions. In fact, Saucelabs actually offers support for multiple CI platforms (just to name a few):</p>
<ul>
<li><a href="https://wiki.saucelabs.com/display/DOCS/Setting+Up+Sauce+Labs+with+Jenkins">Jenkins</a></li>
<li><a href="https://wiki.saucelabs.com/display/DOCS/Setting+Up+Sauce+Labs+with+Bamboo">Bamboo</a></li>
<li><a href="https://wiki.saucelabs.com/display/DOCS/Setting+Up+Sauce+Labs+with+TeamCity">TeamCity</a></li>
</ul>
<p>They even have an official Azure Pipelines extension as well! The problem, however, is that they actually officially stopped supporting the extension. It also seems that they aren&rsquo;t even considering maintaining it, and encouraging me to comment on a thread that I highly doubt their product or engineering team is even taking seriously:</p>
<p><img src="./images/rejection.jpg" alt="Rejection"></p>
<p>That&rsquo;s pretty shameful, as Azure Pipelines has grown to be a very appealing CI platform in the last few years. Almost every single client I&rsquo;ve interacted with thus far in my career has transitioned from a particular CI platform, to Azure Pipelines. So since the extension is no longer supported, how can we recreate the functionality their prior extension did? Luckily for us, there&rsquo;s a work around.</p>
<h2 id="saucelabs-html-embedding-capability">Saucelabs HTML Embedding Capability</h2>
<p>Hidden deep within the Saucelabs Documentation, there is a capability that allows for generating custom made HTML reports with videos embedded within them:</p>
<p><a href="https://wiki.saucelabs.com/display/DOCS/Embedding+Test+Results+in+HTML+Pages">Saucelabs Embedded Documentation</a></p>
<p>To quickly summarize this wiki page, there are really three requirements here to generate custom HTML reports:</p>
<ol>
<li>An html file containing a script such as the one below to embed an iframe of your job:</li>
</ol>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html">&lt;<span style="color:#f92672">script</span> <span style="color:#a6e22e">src</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;https://app.saucelabs.com/video-embed/YOUR_JOB_ID.js?auth=AUTH_TOKEN&#34;</span>&gt;
&lt;/<span style="color:#f92672">script</span>&gt;
</code></pre></div><ol start="2">
<li>
<p>A generated md5 authorization token based on a particular job/test id and your sauce credentials.</p>
</li>
<li>
<p>A test case / job id orginating from a particular build.</p>
</li>
</ol>
<p>Essentially, what we can do with this is generate a static html file via a quick command line application (or within your test automation framework, d on requirements) containing all of the videos of our executed test cases from our job as an artifact within our pipeline by utilizing a html publish task in the AzDO market place: <a href="https://marketplace.visualstudio.com/items?itemName=JakubRumpca.azure-pipelines-html-report">Publish HTML</a>.</p>
<p>With that being said, the example I will be demonstrating in this post is utilizing an API client for Saucelabs I created in Go to retrieve build related information of my test execution in which I generate my reports off of.</p>
<p>Let&rsquo;s get started!</p>
<h2 id="defining-a-build-name-for-your-test-execution-in-saucelabs">Defining a build name for your test execution in Saucelabs</h2>
<p>One important piece of information our test execution needs (on the framework level) is a build execution name. While there are many ways to build out our capabilities for Selenium, here is what I&rsquo;m currently doing within my remote web driver capabilities in my Geb/Spock implementation:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-groovy" data-lang="groovy">String sauceUsername <span style="color:#f92672">=</span> System<span style="color:#f92672">.</span><span style="color:#a6e22e">getenv</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;SAUCE_USER&#34;</span><span style="color:#f92672">)</span>
String sauceAccessKey <span style="color:#f92672">=</span> System<span style="color:#f92672">.</span><span style="color:#a6e22e">getenv</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;SAUCE_KEY&#34;</span><span style="color:#f92672">)</span>

<span style="color:#75715e">//capabilities
</span><span style="color:#75715e"></span>MutableCapabilities sauceOptions <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> MutableCapabilities<span style="color:#f92672">();</span>
sauceOptions<span style="color:#f92672">.</span><span style="color:#a6e22e">setCapability</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;build&#34;</span><span style="color:#f92672">,</span> System<span style="color:#f92672">.</span><span style="color:#a6e22e">getProperty</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;sauceBuildName&#34;</span><span style="color:#f92672">))</span>
sauceOptions<span style="color:#f92672">.</span><span style="color:#a6e22e">setCapability</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;name&#34;</span><span style="color:#f92672">,</span> System<span style="color:#f92672">.</span><span style="color:#a6e22e">getProperty</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;testName&#34;</span><span style="color:#f92672">))</span>

ChromeOptions browserOptions <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> ChromeOptions<span style="color:#f92672">()</span>
browserOptions<span style="color:#f92672">.</span><span style="color:#a6e22e">setExperimentalOption</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;w3c&#34;</span><span style="color:#f92672">,</span> <span style="color:#66d9ef">true</span><span style="color:#f92672">)</span>
browserOptions<span style="color:#f92672">.</span><span style="color:#a6e22e">setCapability</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;platformName&#34;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#34;Windows 10&#34;</span><span style="color:#f92672">)</span>
browserOptions<span style="color:#f92672">.</span><span style="color:#a6e22e">setCapability</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;browserVersion&#34;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#34;latest&#34;</span><span style="color:#f92672">)</span>
browserOptions<span style="color:#f92672">.</span><span style="color:#a6e22e">setCapability</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;sauce:options&#34;</span><span style="color:#f92672">,</span> sauceOptions<span style="color:#f92672">)</span>
</code></pre></div><p>Where <code>sauceBuildName</code> is a system property I am forwarding within my gradle execution in my CI:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">gradlew test -Xmx3072m -Dgeb.env<span style="color:#f92672">=</span>sauceLabs -Dgeb.build.baseUrl<span style="color:#f92672">=</span>http://www.google.com -Dtest.set<span style="color:#f92672">=</span>Smoke -DsauceBuildName<span style="color:#f92672">=</span>**mybuildname**
</code></pre></div><p>What this will allow me to do is be able to give an identifiable name of my executed build within Saucelabs like this:</p>
<p><img src="./images/buildlistsauce.jpg" alt="Sauce Build List"></p>
<p>Once we have that, we can then utilize my Sauce API Client to retrieve our respective build information.</p>
<h2 id="interfacing-with-the-saucelabs-api-in-go">Interfacing with the Saucelabs API in Go</h2>
<h3 id="prereqs">Prereqs</h3>
<p>Ensure you pull my <a href="https://github.com/ssulei7/saucelabs-client-go">Saucelabs API Client</a> into your go.mod file.</p>
<p>If you never used used dependencies in go, please refer to the official <a href="https://golang.org/doc/modules/managing-dependencies">Golang Documentation</a>.</p>
<p>Be sure to also to view the README.MD file to ensure you can authenticate appropriately into my client library. Here&rsquo;s a quick example of instantiating a new client:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#a6e22e">c</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">sauce</span>.<span style="color:#a6e22e">NewClient</span>(<span style="color:#a6e22e">os</span>.<span style="color:#a6e22e">getEnv</span>(<span style="color:#e6db74">&#34;SAUCE_KEY&#34;</span>), <span style="color:#a6e22e">os</span>.<span style="color:#a6e22e">getEnv</span>(<span style="color:#e6db74">&#34;SAUCE_USER&#34;</span>), <span style="color:#e6db74">&#34;&#34;</span>)
</code></pre></div><p>Where <code>&quot;&quot;</code> allows for us to use Saucelabs default base URL.</p>
<h3 id="pulling-down--filtering-builds-for-a-particular-user">Pulling down / filtering builds for a particular user</h3>
<p>Once you have the client library pulled down and instantiate a new client, you can then utilize the library to pull all builds and filter by the build name:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#a6e22e">c</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">sauce</span>.<span style="color:#a6e22e">NewClient</span>(<span style="color:#a6e22e">os</span>.<span style="color:#a6e22e">getEnv</span>(<span style="color:#e6db74">&#34;SAUCE_KEY&#34;</span>), <span style="color:#a6e22e">os</span>.<span style="color:#a6e22e">getEnv</span>(<span style="color:#e6db74">&#34;SAUCE_USER&#34;</span>), <span style="color:#e6db74">&#34;&#34;</span>)
<span style="color:#a6e22e">builds</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">c</span>.<span style="color:#a6e22e">GetBuilds</span>()
<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">build</span> <span style="color:#a6e22e">sauce</span>.<span style="color:#a6e22e">Build</span>
<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">==</span> <span style="color:#66d9ef">nil</span> {
    <span style="color:#75715e">//filter and find the build containing the build name i had within my 
</span><span style="color:#75715e"></span>    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">_</span>, <span style="color:#a6e22e">b</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">range</span> <span style="color:#a6e22e">builds</span> {
        <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">b</span>.<span style="color:#a6e22e">Name</span> <span style="color:#f92672">==</span> <span style="color:#a6e22e">os</span>.<span style="color:#a6e22e">getEnv</span>(<span style="color:#e6db74">&#34;MY_BUILD&#34;</span>) {
            <span style="color:#a6e22e">build</span> = <span style="color:#a6e22e">b</span>
            <span style="color:#66d9ef">break</span>
        }
    }
}

<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">build</span> <span style="color:#f92672">==</span> <span style="color:#66d9ef">nil</span> {
    <span style="color:#75715e">//our build doesn&#39;t exist within our script, terminate execution
</span><span style="color:#75715e"></span>    <span style="color:#a6e22e">os</span>.<span style="color:#a6e22e">Exit</span>(<span style="color:#ae81ff">1</span>)
}
</code></pre></div><p>Once we find / validate the appropriate build exists, now we must find all the test case id&rsquo;s that were executed within this build.</p>
<h3 id="finding-particular-test-cases-for-a-build">Finding particular test cases for a build</h3>
<p>To find test cases associated with our build, we can pull down all the jobs that were executed by a particular user:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#a6e22e">jobs</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">c</span>.<span style="color:#a6e22e">GetJobs</span>()

<span style="color:#75715e">//where we will store all filtered jobs
</span><span style="color:#75715e"></span><span style="color:#66d9ef">var</span> <span style="color:#a6e22e">myJobs</span> []<span style="color:#a6e22e">sauce</span>.<span style="color:#a6e22e">Job</span>
</code></pre></div><p>And then we can go ahead and find all the jobs containing our build name and add it to our list:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">==</span> <span style="color:#66d9ef">nil</span> {
    <span style="color:#75715e">// iterate thru jobs to find those that are within my build
</span><span style="color:#75715e"></span>    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">_</span>, <span style="color:#a6e22e">job</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">range</span> <span style="color:#a6e22e">jobs</span> {
        <span style="color:#75715e">//check if the current job contains my build name
</span><span style="color:#75715e"></span>        <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">build</span>.<span style="color:#a6e22e">Name</span> <span style="color:#f92672">==</span> <span style="color:#a6e22e">job</span>.<span style="color:#a6e22e">BaseConfig</span>.<span style="color:#a6e22e">SauceOptions</span>.<span style="color:#a6e22e">Build</span> {
            <span style="color:#75715e">//append this current job into my slice
</span><span style="color:#75715e"></span>            <span style="color:#a6e22e">myJobs</span> = append(<span style="color:#a6e22e">myJobs</span>, <span style="color:#a6e22e">job</span>)
        }
    }
}
</code></pre></div><h3 id="generating-the-html-report">Generating the HTML Report</h3>
<p>Once we then find all of our job id&rsquo;s, we can then define a function called <code>generateHtml</code> where we can build a simple html file that will:</p>
<ol>
<li>Generate an md5 auth token to view our test case video without the need to login.</li>
<li>Generate Iframes of each test case executed within our build in our html file.</li>
<li>Organize them in a table using a css import of Bootstrap.</li>
</ol>
<p>Our function should look something like this:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">generateHtml</span>(<span style="color:#a6e22e">sauceKey</span>, <span style="color:#a6e22e">userName</span> <span style="color:#66d9ef">string</span>, <span style="color:#a6e22e">jobs</span> <span style="color:#f92672">*</span>[]<span style="color:#a6e22e">sauce</span>.<span style="color:#a6e22e">Job</span>) {
<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">htmlTemplate</span> = <span style="color:#e6db74">`
</span><span style="color:#e6db74">&lt;!DOCTYPE html&gt;
</span><span style="color:#e6db74">&lt;html lang=&#34;en&#34;&gt;
</span><span style="color:#e6db74">
</span><span style="color:#e6db74">&lt;head&gt;
</span><span style="color:#e6db74">    &lt;meta charset=&#34;UTF-8&#34;&gt;
</span><span style="color:#e6db74">    &lt;meta http-equiv=&#34;X-UA-Compatible&#34; content=&#34;IE=edge&#34;&gt;
</span><span style="color:#e6db74">    &lt;meta name=&#34;viewport&#34; content=&#34;width=device-width, initial-scale=1.0&#34;&gt;
</span><span style="color:#e6db74">    &lt;meta charset=&#34;UTF-8&#34;&gt;
</span><span style="color:#e6db74">
</span><span style="color:#e6db74">    &lt;link href=&#34;https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta2/dist/css/bootstrap.min.css&#34; rel=&#34;stylesheet&#34;
</span><span style="color:#e6db74">        integrity=&#34;sha384-BmbxuPwQa2lc/FVzBcNJ7UAyJxM6wuqIj61tLrc4wSX0szH/Ev+nYRRuWlolflfl&#34; crossorigin=&#34;anonymous&#34;&gt;
</span><span style="color:#e6db74">    &lt;title&gt;BuildResults&lt;/title&gt;
</span><span style="color:#e6db74">
</span><span style="color:#e6db74">&lt;/head&gt;
</span><span style="color:#e6db74">
</span><span style="color:#e6db74">&lt;body&gt;
</span><span style="color:#e6db74">    &lt;table class=&#34;table table-light table-striped&#34;&gt;
</span><span style="color:#e6db74">        &lt;tr&gt;
</span><span style="color:#e6db74">            &lt;th&gt;Test Case&lt;/th&gt;
</span><span style="color:#e6db74">            &lt;th&gt;Test Case Video&lt;/th&gt;
</span><span style="color:#e6db74">        &lt;/tr&gt;
</span><span style="color:#e6db74">`</span>

<span style="color:#66d9ef">for</span> <span style="color:#a6e22e">_</span>, <span style="color:#a6e22e">job</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">range</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">jobs</span> {
    <span style="color:#a6e22e">hashKey</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">generateKey</span>(<span style="color:#a6e22e">sauceKey</span>, <span style="color:#a6e22e">userName</span>, <span style="color:#a6e22e">job</span>.<span style="color:#a6e22e">ID</span>)
    <span style="color:#a6e22e">scriptString</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Sprintf</span>(
        <span style="color:#e6db74">`&lt;tr&gt;
</span><span style="color:#e6db74">        &lt;td class=&#34;align-middle&#34;&gt;
</span><span style="color:#e6db74">            %s
</span><span style="color:#e6db74">        &lt;/td&gt;
</span><span style="color:#e6db74">        &lt;td class=&#34;align-middle&#34;&gt;
</span><span style="color:#e6db74">            &lt;div class=&#34;d-flex align-items-center justify-content-center&#34;&gt;
</span><span style="color:#e6db74">                &lt;script
</span><span style="color:#e6db74">                    src=&#34;https://app.saucelabs.com/job-embed/%s.js?auth=%s&#34;&gt;
</span><span style="color:#e6db74">                    &lt;/script&gt;
</span><span style="color:#e6db74">            &lt;/div&gt;
</span><span style="color:#e6db74">        &lt;/td&gt;
</span><span style="color:#e6db74">    &lt;/tr&gt;`</span>, <span style="color:#a6e22e">job</span>.<span style="color:#a6e22e">BaseConfig</span>.<span style="color:#a6e22e">SauceOptions</span>.<span style="color:#a6e22e">Name</span>, <span style="color:#a6e22e">job</span>.<span style="color:#a6e22e">ID</span>, <span style="color:#a6e22e">hashKey</span>)

    <span style="color:#a6e22e">htmlTemplate</span> <span style="color:#f92672">+=</span> <span style="color:#a6e22e">scriptString</span>
}

<span style="color:#a6e22e">htmlTemplate</span> <span style="color:#f92672">+=</span> <span style="color:#e6db74">`
</span><span style="color:#e6db74">&lt;/tr&gt;
</span><span style="color:#e6db74">&lt;/table&gt;
</span><span style="color:#e6db74">&lt;/body&gt;
</span><span style="color:#e6db74">
</span><span style="color:#e6db74">&lt;/html&gt;
</span><span style="color:#e6db74">`</span>
</code></pre></div><p>There&rsquo;s a lot going on here, but I will try to explain to the best of my ability. The first thing that we&rsquo;re doing is defining a <code>htmlTemplate</code> variable that contains the beginning our html file as a multi-line string, including:</p>
<ul>
<li>Our head in which we can reference bootstrap css</li>
<li>The beginning of our body, which contains:
<ul>
<li>Our table with the appropriate styling from bootstrap</li>
<li>Our table header names as the first row</li>
</ul>
</li>
</ul>
<p>From there, in the next section of code:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">for</span> <span style="color:#a6e22e">_</span>, <span style="color:#a6e22e">job</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">range</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">jobs</span> {
    <span style="color:#a6e22e">hashKey</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">generateKey</span>(<span style="color:#a6e22e">sauceKey</span>, <span style="color:#a6e22e">userName</span>, <span style="color:#a6e22e">job</span>.<span style="color:#a6e22e">ID</span>)
    <span style="color:#a6e22e">scriptString</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Sprintf</span>(
        <span style="color:#e6db74">`&lt;tr&gt;
</span><span style="color:#e6db74">        &lt;td class=&#34;align-middle&#34;&gt;
</span><span style="color:#e6db74">            %s
</span><span style="color:#e6db74">        &lt;/td&gt;
</span><span style="color:#e6db74">        &lt;td class=&#34;align-middle&#34;&gt;
</span><span style="color:#e6db74">            &lt;div class=&#34;d-flex align-items-center justify-content-center&#34;&gt;
</span><span style="color:#e6db74">                &lt;script
</span><span style="color:#e6db74">                    src=&#34;https://app.saucelabs.com/job-embed/%s.js?auth=%s&#34;&gt;
</span><span style="color:#e6db74">                    &lt;/script&gt;
</span><span style="color:#e6db74">            &lt;/div&gt;
</span><span style="color:#e6db74">        &lt;/td&gt;
</span><span style="color:#e6db74">    &lt;/tr&gt;`</span>, <span style="color:#a6e22e">job</span>.<span style="color:#a6e22e">BaseConfig</span>.<span style="color:#a6e22e">SauceOptions</span>.<span style="color:#a6e22e">Name</span>, <span style="color:#a6e22e">job</span>.<span style="color:#a6e22e">ID</span>, <span style="color:#a6e22e">hashKey</span>)

    <span style="color:#a6e22e">htmlTemplate</span> <span style="color:#f92672">+=</span> <span style="color:#a6e22e">scriptString</span>
}
</code></pre></div><p>We are iterating through all of jobs within our slice and doing the following:</p>
<ul>
<li>Generating an unique authentication token</li>
<li>Creating the appropriate script string within an html table row, and injecting our job name, id, and auth token into the script tag using Go&rsquo;s string formatter <code>fmt.Sprintf</code></li>
<li>Appending the table row string into our multi-line string template</li>
</ul>
<p>One thing I&rsquo;d like to highlight is the <code>generateKey</code> function, which is one I defined and looks as followed:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">generateKey</span>(<span style="color:#a6e22e">sauceKey</span>, <span style="color:#a6e22e">userName</span>, <span style="color:#a6e22e">message</span> <span style="color:#66d9ef">string</span>) <span style="color:#66d9ef">string</span> {
	<span style="color:#a6e22e">key</span> <span style="color:#f92672">:=</span> []byte(<span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Sprintf</span>(<span style="color:#e6db74">&#34;%s:%s&#34;</span>, <span style="color:#a6e22e">userName</span>, <span style="color:#a6e22e">sauceKey</span>))
	<span style="color:#a6e22e">mac</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">hmac</span>.<span style="color:#a6e22e">New</span>(<span style="color:#a6e22e">md5</span>.<span style="color:#a6e22e">New</span>, <span style="color:#a6e22e">key</span>)
	<span style="color:#a6e22e">mac</span>.<span style="color:#a6e22e">Write</span>([]byte(<span style="color:#a6e22e">message</span>))
	<span style="color:#66d9ef">return</span> <span style="color:#a6e22e">hex</span>.<span style="color:#a6e22e">EncodeToString</span>(<span style="color:#a6e22e">mac</span>.<span style="color:#a6e22e">Sum</span>(<span style="color:#66d9ef">nil</span>))
}
</code></pre></div><p>Here I am following the <a href="https://wiki.saucelabs.com/display/DOCS/Building+Sharable+Links+to+Test+Results">advice</a> given by the Saucelabs team to generate an md5 auth token to our particular test case.</p>
<p>Once we complete iterating through our IDs and building out our table rows, we then do the following:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#a6e22e">htmlTemplate</span> <span style="color:#f92672">+=</span> <span style="color:#e6db74">`
</span><span style="color:#e6db74">	&lt;/tr&gt;
</span><span style="color:#e6db74">    &lt;/table&gt;
</span><span style="color:#e6db74">&lt;/body&gt;
</span><span style="color:#e6db74">
</span><span style="color:#e6db74">&lt;/html&gt;
</span><span style="color:#e6db74">`</span>

<span style="color:#a6e22e">f</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">os</span>.<span style="color:#a6e22e">Create</span>(<span style="color:#e6db74">&#34;index.html&#34;</span>)

<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">==</span> <span style="color:#66d9ef">nil</span> {
    <span style="color:#66d9ef">defer</span> <span style="color:#a6e22e">f</span>.<span style="color:#a6e22e">Close</span>()
    <span style="color:#a6e22e">f</span>.<span style="color:#a6e22e">Write</span>([]byte(<span style="color:#a6e22e">htmlTemplate</span>))
}
</code></pre></div><p>Here, we are:</p>
<ul>
<li>Closing out our table tag, as well as our body/html tag</li>
<li>Using Go&rsquo;s os package to create an index.html file</li>
<li>Writing that multi-line html string as a byte array, into our newly created file.</li>
</ul>
<p>More or less, that&rsquo;s how the Go code looks like, and here is all of the code strung together as a finished product:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#f92672">package</span> <span style="color:#a6e22e">main</span>

<span style="color:#f92672">import</span> (
	<span style="color:#e6db74">&#34;crypto/hmac&#34;</span>
	<span style="color:#e6db74">&#34;crypto/md5&#34;</span>
	<span style="color:#e6db74">&#34;encoding/hex&#34;</span>
	<span style="color:#e6db74">&#34;fmt&#34;</span>
	<span style="color:#e6db74">&#34;os&#34;</span>

	<span style="color:#e6db74">&#34;github.com/ssulei7/saucelabs-client-go/sauce&#34;</span>
)

<span style="color:#66d9ef">func</span> <span style="color:#a6e22e">generateHtml</span>(<span style="color:#a6e22e">sauceKey</span>, <span style="color:#a6e22e">userName</span> <span style="color:#66d9ef">string</span>, <span style="color:#a6e22e">jobs</span> <span style="color:#f92672">*</span>[]<span style="color:#a6e22e">sauce</span>.<span style="color:#a6e22e">Job</span>) {
<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">htmlTemplate</span> = <span style="color:#e6db74">`
</span><span style="color:#e6db74">&lt;!DOCTYPE html&gt;
</span><span style="color:#e6db74">&lt;html lang=&#34;en&#34;&gt;
</span><span style="color:#e6db74">
</span><span style="color:#e6db74">&lt;head&gt;
</span><span style="color:#e6db74">    &lt;meta charset=&#34;UTF-8&#34;&gt;
</span><span style="color:#e6db74">    &lt;meta http-equiv=&#34;X-UA-Compatible&#34; content=&#34;IE=edge&#34;&gt;
</span><span style="color:#e6db74">    &lt;meta name=&#34;viewport&#34; content=&#34;width=device-width, initial-scale=1.0&#34;&gt;
</span><span style="color:#e6db74">    &lt;meta charset=&#34;UTF-8&#34;&gt;
</span><span style="color:#e6db74">
</span><span style="color:#e6db74">    &lt;link href=&#34;https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta2/dist/css/bootstrap.min.css&#34; rel=&#34;stylesheet&#34;
</span><span style="color:#e6db74">        integrity=&#34;sha384-BmbxuPwQa2lc/FVzBcNJ7UAyJxM6wuqIj61tLrc4wSX0szH/Ev+nYRRuWlolflfl&#34; crossorigin=&#34;anonymous&#34;&gt;
</span><span style="color:#e6db74">    &lt;title&gt;BuildResults&lt;/title&gt;
</span><span style="color:#e6db74">
</span><span style="color:#e6db74">&lt;/head&gt;
</span><span style="color:#e6db74">
</span><span style="color:#e6db74">&lt;body&gt;
</span><span style="color:#e6db74">    &lt;table class=&#34;table table-light table-striped&#34;&gt;
</span><span style="color:#e6db74">        &lt;tr&gt;
</span><span style="color:#e6db74">            &lt;th&gt;Test Case&lt;/th&gt;
</span><span style="color:#e6db74">            &lt;th&gt;Test Case Video&lt;/th&gt;
</span><span style="color:#e6db74">        &lt;/tr&gt;
</span><span style="color:#e6db74">`</span>

<span style="color:#66d9ef">for</span> <span style="color:#a6e22e">_</span>, <span style="color:#a6e22e">job</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">range</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">jobs</span> {
    <span style="color:#a6e22e">hashKey</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">generateKey</span>(<span style="color:#a6e22e">sauceKey</span>, <span style="color:#a6e22e">userName</span>, <span style="color:#a6e22e">job</span>.<span style="color:#a6e22e">ID</span>)
    <span style="color:#a6e22e">scriptString</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Sprintf</span>(
        <span style="color:#e6db74">`&lt;tr&gt;
</span><span style="color:#e6db74">        &lt;td class=&#34;align-middle&#34;&gt;
</span><span style="color:#e6db74">            %s
</span><span style="color:#e6db74">        &lt;/td&gt;
</span><span style="color:#e6db74">        &lt;td class=&#34;align-middle&#34;&gt;
</span><span style="color:#e6db74">            &lt;div class=&#34;d-flex align-items-center justify-content-center&#34;&gt;
</span><span style="color:#e6db74">                &lt;script
</span><span style="color:#e6db74">                    src=&#34;https://app.saucelabs.com/job-embed/%s.js?auth=%s&#34;&gt;
</span><span style="color:#e6db74">                    &lt;/script&gt;
</span><span style="color:#e6db74">            &lt;/div&gt;
</span><span style="color:#e6db74">        &lt;/td&gt;
</span><span style="color:#e6db74">    &lt;/tr&gt;`</span>, <span style="color:#a6e22e">job</span>.<span style="color:#a6e22e">BaseConfig</span>.<span style="color:#a6e22e">SauceOptions</span>.<span style="color:#a6e22e">Name</span>, <span style="color:#a6e22e">job</span>.<span style="color:#a6e22e">ID</span>, <span style="color:#a6e22e">hashKey</span>)

    <span style="color:#a6e22e">htmlTemplate</span> <span style="color:#f92672">+=</span> <span style="color:#a6e22e">scriptString</span>
}

<span style="color:#a6e22e">htmlTemplate</span> <span style="color:#f92672">+=</span> <span style="color:#e6db74">`
</span><span style="color:#e6db74">&lt;/tr&gt;
</span><span style="color:#e6db74">&lt;/table&gt;
</span><span style="color:#e6db74">&lt;/body&gt;
</span><span style="color:#e6db74">
</span><span style="color:#e6db74">&lt;/html&gt;
</span><span style="color:#e6db74">`</span>

<span style="color:#66d9ef">func</span> <span style="color:#a6e22e">generateKey</span>(<span style="color:#a6e22e">sauceKey</span>, <span style="color:#a6e22e">userName</span>, <span style="color:#a6e22e">message</span> <span style="color:#66d9ef">string</span>) <span style="color:#66d9ef">string</span> {
	<span style="color:#a6e22e">key</span> <span style="color:#f92672">:=</span> []byte(<span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Sprintf</span>(<span style="color:#e6db74">&#34;%s:%s&#34;</span>, <span style="color:#a6e22e">userName</span>, <span style="color:#a6e22e">sauceKey</span>))
	<span style="color:#a6e22e">mac</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">hmac</span>.<span style="color:#a6e22e">New</span>(<span style="color:#a6e22e">md5</span>.<span style="color:#a6e22e">New</span>, <span style="color:#a6e22e">key</span>)
	<span style="color:#a6e22e">mac</span>.<span style="color:#a6e22e">Write</span>([]byte(<span style="color:#a6e22e">message</span>))
	<span style="color:#66d9ef">return</span> <span style="color:#a6e22e">hex</span>.<span style="color:#a6e22e">EncodeToString</span>(<span style="color:#a6e22e">mac</span>.<span style="color:#a6e22e">Sum</span>(<span style="color:#66d9ef">nil</span>))
}

<span style="color:#66d9ef">func</span> <span style="color:#a6e22e">main</span>() {

	<span style="color:#a6e22e">c</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">sauce</span>.<span style="color:#a6e22e">NewClient</span>(<span style="color:#a6e22e">os</span>.<span style="color:#a6e22e">getEnv</span>(<span style="color:#e6db74">&#34;SAUCE_USER&#34;</span>), <span style="color:#a6e22e">os</span>.<span style="color:#a6e22e">getEnv</span>(<span style="color:#e6db74">&#34;SAUCE_KEY&#34;</span>), <span style="color:#e6db74">&#34;&#34;</span>)
    <span style="color:#a6e22e">builds</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">c</span>.<span style="color:#a6e22e">GetBuilds</span>()
    <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">build</span> <span style="color:#a6e22e">sauce</span>.<span style="color:#a6e22e">Build</span>
    <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">==</span> <span style="color:#66d9ef">nil</span> {
        <span style="color:#75715e">//filter and find the build containing the build name i had within my 
</span><span style="color:#75715e"></span>        <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">_</span>, <span style="color:#a6e22e">b</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">range</span> <span style="color:#a6e22e">builds</span> {
            <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">b</span>.<span style="color:#a6e22e">Name</span> <span style="color:#f92672">==</span> <span style="color:#a6e22e">os</span>.<span style="color:#a6e22e">getEnv</span>(<span style="color:#e6db74">&#34;MY_BUILD&#34;</span>) {
                <span style="color:#a6e22e">build</span> = <span style="color:#a6e22e">b</span>
                <span style="color:#66d9ef">break</span>
            }
        }
    }

    <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">build</span> <span style="color:#f92672">==</span> <span style="color:#66d9ef">nil</span> {
        <span style="color:#75715e">//our build doesn&#39;t exist within our script, terminate execution
</span><span style="color:#75715e"></span>        <span style="color:#a6e22e">os</span>.<span style="color:#a6e22e">Exit</span>(<span style="color:#ae81ff">1</span>)
    }

    <span style="color:#a6e22e">jobs</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">c</span>.<span style="color:#a6e22e">GetJobs</span>()

    <span style="color:#75715e">//where we will store all filtered jobs
</span><span style="color:#75715e"></span>    <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">myJobs</span> []<span style="color:#a6e22e">sauce</span>.<span style="color:#a6e22e">Job</span>

	<span style="color:#66d9ef">for</span> <span style="color:#a6e22e">_</span>, <span style="color:#a6e22e">job</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">range</span> <span style="color:#a6e22e">myJobs</span> {
		<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">buildName</span> <span style="color:#f92672">==</span> <span style="color:#a6e22e">job</span>.<span style="color:#a6e22e">BaseConfig</span>.<span style="color:#a6e22e">SauceOptions</span>.<span style="color:#a6e22e">Build</span> {
			<span style="color:#a6e22e">myJobs</span> = append(<span style="color:#a6e22e">myJobs</span>, <span style="color:#a6e22e">job</span>)
		}
	}

	<span style="color:#a6e22e">generateHtml</span>(<span style="color:#a6e22e">os</span>.<span style="color:#a6e22e">getEnv</span>(<span style="color:#e6db74">&#34;SAUCE_USER&#34;</span>), <span style="color:#a6e22e">os</span>.<span style="color:#a6e22e">getEnv</span>(<span style="color:#e6db74">&#34;SAUCE_KEY&#34;</span>), <span style="color:#f92672">&amp;</span><span style="color:#a6e22e">myJobs</span>)
}
</code></pre></div><p>We can the build our Go application by running</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">go build .
</code></pre></div><p>And copy over the appropriate executable into the repo containing our tests.</p>
<h2 id="executing-the-html-generator-within-azure-pipelines">Executing the HTML Generator within Azure Pipelines</h2>
<p>Now, within our YML pipeline file, we can now add the following tasks:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yaml" data-lang="yaml"><span style="color:#75715e"># run my tests</span>
- <span style="color:#f92672">task</span>: <span style="color:#ae81ff">Gradle@2</span>
  <span style="color:#f92672">inputs</span>:
    <span style="color:#f92672">workingDirectory</span>: <span style="color:#e6db74">&#39;&#39;</span>
    <span style="color:#f92672">gradleWrapperFile</span>: <span style="color:#e6db74">&#39;gradlew&#39;</span>
    <span style="color:#f92672">gradleOptions</span>: <span style="color:#e6db74">&#39;-Xmx3072m -Dgeb.env=sauceLabs -Dgeb.build.baseUrl=http://www.google.com -Dtest.set=Smoke&#39;</span>
    <span style="color:#f92672">javaHomeOption</span>: <span style="color:#e6db74">&#39;JDKVersion&#39;</span>
    <span style="color:#f92672">jdkVersionOption</span>: <span style="color:#e6db74">&#39;1.8&#39;</span>
    <span style="color:#f92672">jdkArchitectureOption</span>: <span style="color:#e6db74">&#39;x64&#39;</span>
    <span style="color:#f92672">publishJUnitResults</span>: <span style="color:#66d9ef">true</span>
    <span style="color:#f92672">testResultsFiles</span>: <span style="color:#e6db74">&#39;build/test-results/**/*.xml&#39;</span>
    <span style="color:#f92672">tasks</span>: <span style="color:#e6db74">&#39;test&#39;</span>

<span style="color:#75715e"># run report generator</span>
- <span style="color:#f92672">task</span>: <span style="color:#ae81ff">CmdLine@2</span>
  <span style="color:#f92672">displayName</span>: <span style="color:#ae81ff">Run Report Generator</span>
  <span style="color:#f92672">inputs</span>:
    <span style="color:#f92672">script</span>: <span style="color:#e6db74">&#39;./path-to-binary/mybinary.exe&#39;</span>

<span style="color:#75715e"># publish html report file</span>
- <span style="color:#f92672">task</span>: <span style="color:#ae81ff">PublishHtmlReport@1</span>
  <span style="color:#f92672">inputs</span>:
    <span style="color:#f92672">tabName</span>: <span style="color:#e6db74">&#39;Test Result Videos&#39;</span>
    <span style="color:#f92672">reportDir</span>: <span style="color:#e6db74">&#39;./path-to-report-file/index.html&#39;</span>
</code></pre></div><p>Where the cmdline task will run our executable (exe, etc dependent on OS we targeted in our <code>go build .</code>) and the <code>PublishHtmlReport</code> task will publish the html file our executable generated. Which in turn, will leave you with a result like this:</p>
<p><img src="./images/saucetable.jpg" alt="Sauce Table"></p>
<h2 id="conclusion-and-retrospective">Conclusion and Retrospective</h2>
<p>Overall, the fact that Saucelabs allows for us to create our own HTML reports is pretty sweet, where we don&rsquo;t need to rely on an extension for maintenance. The same method I utilized here can also technically be used in any CI platform of your choice where you can publish html reports. One thing that I am looking towards possibly improving in my quick and dirty CLI application is improving the overall HTML generation by using <a href="https://golang.org/pkg/html/template/">Go&rsquo;s HTML templating packages</a>. This will allow me to build my future templates moving forward in a more data driven way.</p>
]]></content>
        </item>
        
        <item>
            <title>Welcome to my Blog</title>
            <link>https://ssulei7.github.io/posts/04-05-2021-welcome-to-my-blog/</link>
            <pubDate>Mon, 05 Apr 2021 17:57:48 -0500</pubDate>
            
            <guid>https://ssulei7.github.io/posts/04-05-2021-welcome-to-my-blog/</guid>
            <description>About me Hi! I&amp;rsquo;m Sully, and welcome to my blog! I am a DevOps Engineer with a former background in software engineering and academia. I am well known for my iconic salmon blazer:
Purpose of my Blog The purpose of this blog is to share my overall journey as to how I got to where I am right now, as well as share some of the things that I&amp;rsquo;m currently working on.</description>
            <content type="html"><![CDATA[<h2 id="about-me">About me</h2>
<p>Hi! I&rsquo;m Sully, and welcome to my blog! I am a DevOps Engineer with a former background in software engineering and academia. I am well known for my iconic salmon blazer:</p>
<p><img src="selfie.jpg" alt="Selfie"></p>
<h2 id="purpose-of-my-blog">Purpose of my Blog</h2>
<p>The purpose of this blog is to share my overall journey as to how I got to where I am right now, as well as share some of the things that I&rsquo;m currently working on. I also plan to share my perspective on certain topics surrounding IT in general.</p>
<h2 id="so-what-exactly-will-i-be-focusing-on">So.. what exactly will I be focusing on?</h2>
<p>A lot of my blog will primarily encompass discussion around:</p>
<ul>
<li>DevOps - top to bottom</li>
<li>Infrastructure as Code with Terraform, Bicep, ARM, etc</li>
<li>Mobile Development SDKS (Flutter, Nativescript, etc)</li>
<li>General Automation, QA specifically</li>
<li>Random thoughts ðŸ˜‰ but mostly tech focused.</li>
</ul>
<p>I&rsquo;m sure this list will grow as I keep moving forward, but stay tuned for more things to come! ðŸ™‚</p>
]]></content>
        </item>
        
    </channel>
</rss>
